<div class="container">
  
  <!-- 検索フォーム -->
  <div class="flex items-center space-x-2">
  <input id="address" type="text" placeholder="住所を入力" class="border rounded-lg p-2 w-64 focus:outline-none focus:ring-2 focus:to-blue-600">
  <button type="button" onclick="codeAddress()" class="bg-secondary text-white p-2 rounded-lg hover:bg-blue-400">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="h-5 w-5 text-gray-500">
      <path fill-rule="evenodd" d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z" clip-rule="evenodd" />
    </svg>
  </button>
  </div>
  
  <!-- 地図表示 -->
  <div id="map" style="height: 500px; width: 100%;"></div>
</div>

<script>
let map;
let geocoder;

function initMap() {
    console.log('Initializing map');
    geocoder = new google.maps.Geocoder();

    navigator.geolocation.getCurrentPosition((position) => {
        const userLocation = { 
            lat: position.coords.latitude, 
            lng: position.coords.longitude 
        };

        map = new google.maps.Map(document.getElementById("map"), {
            center: userLocation,
            zoom: 15,
        });

        new google.maps.Marker({
            position: userLocation,
            map: map,
            title: "現在地"
        });

        searchCafes(userLocation);

        // ドラッグ後にカフェを再検索
        map.addListener('dragend', () => {
            const center = map.getCenter();
            searchCafes(center);
        });
    }, (error) => {
        console.error("現在地の取得に失敗しました。", error);
    });
}

function codeAddress() {
    let inputAddress = document.getElementById('address').value;
    geocoder.geocode({ 'address': inputAddress }, function(results, status) {
        if (status == 'OK') {
            map.setCenter(results[0].geometry.location);
            searchCafes(results[0].geometry.location);
        } else {
            alert('該当する結果がありませんでした：' + status);
        }
    });
}

function searchCafes(location) {
    const service = new google.maps.places.PlacesService(map);
    service.nearbySearch({
        location: location,
        radius: 5000,
        keyword: "抹茶カフェ"
    }, (results, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
            results.forEach((place) => {
                const marker = new google.maps.Marker({
                    position: place.geometry.location,
                    map: map,
                    title: place.name
                });

                marker.addListener('click', () => {
                    service.getDetails({ placeId: place.place_id }, (placeDetails, status) => {
                        if (status === google.maps.places.PlacesServiceStatus.OK) {
                            const contentString = `
                                <div class="p-4 bg-white rounded-lg shadow-lg">
                                  <h2 class="text-lg font-semibold">${placeDetails.name}</h2>
                                  <p class="text-gray-600">${placeDetails.formatted_address}</p>
                                  <a href="https://www.google.com/maps/place/?q=place_id:${place.place_id}" target="_blank">Googleで見る</a>
                                </div>`;
                            const infowindow = new google.maps.InfoWindow({
                                content: contentString,
                            });
                            infowindow.open(map, marker);
                        }
                    });
                });
            });
        }
    });
}
</script>

<!-- Google Maps APIのスクリプトを非同期に読み込む -->
<script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&libraries=places&callback=initMap"></script>
